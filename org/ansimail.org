#+hugo_base_dir: ../
#+hugo_section: ./

* Introduction
:PROPERTIES:
:EXPORT_FILE_NAME: _index
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :chapter true
:END:
** welcome
* Contact
:PROPERTIES:
:EXPORT_FILE_NAME: _index
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :chapter true
:EXPORT_HUGO_SECTION*: contact
:END:
trying this out to see what is happening

* About
:PROPERTIES:
:EXPORT_FILE_NAME: _index
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :chapter true
:EXPORT_HUGO_SECTION*: about
:END:
This gets created directly in ~<HUGO_BASE_DIR>/content/~.

* Credits
:PROPERTIES:
:EXPORT_FILE_NAME: _index
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :chapter true
:EXPORT_HUGO_SECTION*: credits
:END:
section to honor the people who have contributed

* KISS
:PROPERTIES:
:EXPORT_FILE_NAME: _index
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :chapter true
:EXPORT_HUGO_SECTION*: kiss
:END:
principles of development and what is not the aim of this setup

* Usage
:PROPERTIES:
:EXPORT_FILE_NAME: _index
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :chapter true
:EXPORT_HUGO_SECTION*: usage
:END:
general usage information

* Contributing
:PROPERTIES:
:EXPORT_FILE_NAME: _index
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :chapter true
:EXPORT_HUGO_SECTION*: dev
:END:
section for people wanting to contribute

* Installation guides
:PROPERTIES:
:EXPORT_FILE_NAME: _index
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :chapter true
:EXPORT_HUGO_SECTION*: install
:END:
* Quick install
:PROPERTIES:
:EXPORT_FILE_NAME: quickinstall
:EXPORT_HUGO_SECTION*: install
:END:
this is a quick install guide

* Detailed installation
:PROPERTIES:
:EXPORT_FILE_NAME: fullinstall
:EXPORT_HUGO_SECTION*: install
:END:
** Assumptions
   This is a install guide for the common human, who has just learned that she wants to set up and email server.
   She know nothing about anything related to setting up a mail server and only has a domain name and couple of bucks (<$10) in her hand.

   We will use those $10 to do some really cool things:
    - Buy a small VPS (with both ipv4 and ipv6)
    - Buy a secondary DNS provider
    - Set up AnsiMail on the server

** General Information
   Hosting your own email is not going to be free.
   I'm just putting it out there for our younger enthusiasts and students who want to try out things in their home without shelling out any money.

   BUT, that was kind of a lie.
   You could host the email in your house but it is going to require certain considerations. I will mention those in places where appropriate, about what steps to take if you are working at home. Most of which is going to be related to nameserver configurations. **But even with all of that, if you host it from home, you will not be able to use it for anything other than testing and learning, as all home ip addresses are banned from sending out email, as a precaution against virus infected computers which perpetually keep sending spam**.

*** Getting a static ip (for noobs like me)
    One of the first things that you need to understand is that you are going to need a static IP. The easiest way to get this is to use a VPS hosting provider, who also supports OpenBSD, the best of which is [Vultr](https://vultr.com).

    You can select the lowest plan for $5 per month, which gives you the enough computing power to try out AnsiMail without turning off any features :)
    The smaller ones are a bit too small for anything worthwhile, imho.

    You server requirements:

*** Now that we have a server
    I am also assuming that you have a domain to your name and that you hold the power to configure everything related to that domain. This includes access to the domain registrar for setting primary nameservers, access to a horrible web-ui for doing "AdVanCEd" DNS condigurations and all that.
    The first thing that we do is to start making preparations for our DNS setup, which we want to manage ourself.

** Prerequisites
   If you skipped to this section, the prerequisites are:
    - OpenBSD 6.6 host with static ipv4 and ipv6, which also allows setting up reverse DNS
    - Access to domain registrar for setting nameservers

*** Set up secondary nameservers
    One of the first things that we are going to do is to get a secondary nameserver service.
    AnsiMail comes with a automated stealth master NSD configuration using the default NSD service in OpenBSD.
    The advantage of this is to be able to modify complex DNS records easily via text configuration which is nicely documented, explaining each option. If anybody has ever tried to work with a web ui based dns configuration and tried to set SRV records, they will know how insanely tedious and complicated it really is.
    Thankfully the worst part of the DNS configuration is automated leaving you with almost nothing to manage yourself (though you can if you want to).

    For a secondary nameserver, the minimum requirements are to be able to accept NOTIFY (which informs the secondary about any updates from your computer).
    Look at the pinned issue for a recommended list of secondary providers. Most services are really cheap at < $2 per month, for more than 10 domains at a time. So if you have a friend it is useful to do this together, as AnsiMail also supports multiple domain email handling.

    The secondary DNS provider will give you two kinds of ip lists
     - *public nameservers*: These are the servers that other people on the internet will think are the primary nameservers of your domain. They will not know about the master DNS resolvers running on your computer (hence stealth master). Most probably each nameserver will have a name (like ns7.provider.tld), an ipv4 and an ipv6. Note these down because they are needed to generate the configuration file. Also go to your domain registrar and register each of the public nameservers as your primary nameservers.
     - *secondary nameservers*: To find the nameserver ip addresses you might need to look around a bit and poke the buttons on the providers api. Note these down as well because they too are needed to generate the configuration file.

    These two are the longest configuration options and everything after this is smooth sailing.

** Set up variables file

   The configuration file for AnsiMail is called `vars.yml` which is supposed to be the filled-in version of the `vars-sample.yml` file.
   Read the `vars-sample.yml` file in depth because all the options have been explained in great detail, so please make sure that you understand each of them.

   You will see that you need to enter the two lists of ip addresses in the two options provided for the stealth master configuration to work.

   First step that you need to do is to make sure that your system is bootstrapped correctly, to get ansible working.

   The assumption going forwarded is that you have downloaded and extracted AnsiMail to some directory and it is the current working directory.

#+begin_src sh -n
sh scripts/bootstrap.sh
#+end_src

This installs the necessary packages, Ansible and GnuPG on your server.
(Currently GnuPG is to be installed manually because it cannot be installed through Ansible due to package ambiguity)

** Run preinstallation playbook

   After the system finishes bootstrapping you need to run the first playbook: `site-preinstall.yml`

#+begin_src sh -n
ansible-playbook site-preinstall.yml
#+end_src

This is going to take a while because it installs quite a bit of packages, so I suggest going and getting some Kombucha.

Also after running this playbook it is advisable to wait a couple of minutes for the site updates to propogate through the interwebs and letting your secondary nameservers update their configurations. Because even though they do accept NOTIFY, I have found that certain servers take some time to update the configuration. Generally 5-10 minuts is enough.

** Run full installation playbook

Now that everyone on the webz knows about your new server names and services, it is time to install the full playbook:

#+begin_src sh -n
ansible-playbook site-install.yml
#+end_src

After this finishes running you should reboot your server to make sure that all the services are going to be using the proper configurations.

AND YOU ARE DONE!

AnsiMail has finished installing on your system and you have a working mail server (which you are unable to access because you don't know the password of your email account :P)

** Post ansible finishing steps

Now that the server has been rebooted and AnsiMail is running, you need to reset the password of you admin account:

Supposing that your adminstrator is called `notaisha` and your domain was `aisha.cc`, run the following command to change the password and reload the services

#+begin_src sh -n
ansimail change-passwd "notaisha@aisha.cc"
ansimail virtual-regen
#+end_src

You can read the github wiki for some general purpose server maintenance commands that AnsiMail adds to the system. They are supremely helpful :)

*** Testing your email

Now that you know your email address and password, its time to test out the shiny new email while it still has that new-email smell.

There is no web-mail configured yet (it is going to be soon), you need to use an email client to access this server.

Some recommended email clients are:
 - Thunderbird
 - KMail
 - Evolution
 - mutt/neomutt
 - Literally anything in the world, AnsiMail is configured to make everyone auto-detect all ports and domain settings automatically

Your username is `<admin>@<domain.tld>`, where you fill your own credentials and your password is what you set in the previous step.

Try sending mails to some other accounts and see if they reach correctly.

A good test is to go on https://mail-tester.com and see what score you get. You should see a 10/10, cuz this setup is fire.

Don't hesitate to ask any questions on IRC or github. I might not be able to respond immediately but I will try to be fast.

Take care, be safe and get back your privacy from Big Brother :)

* Extra guides
:PROPERTIES:
:EXPORT_FILE_NAME: _index
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :chapter true
:EXPORT_HUGO_SECTION*: guides
:END:
extra guides not directly related to base ansimail
* Secondary nameserver overview
:PROPERTIES:
:EXPORT_FILE_NAME: secondary
:EXPORT_HUGO_SECTION*: guides
:END:
** Secondary and Primary DNS explanations

First let us look at the big picture of the stealth master configuration of a DNS server
- *LARGE, SMALL, MEDIUM* show the computing capabilities of the server.
#+begin_src
-------------------                  -----------------------              ---------------------
|    (SMALL)      |    NOTIFY        |     (MEDIUM)        |   (internal) |    (LARGE)        |
|    Personal     | ---------------> |     Secondary DNS   |<------------>|   Public facing   |
|      VPS        | <--------------- |       server IP     |              |     DNS server    |
|     [ip1]       |    AXFR request  |       [ip2]         |              |      [ip3]        |
-------------------                  -----------------------              ---------------------
       |                                                                            ^  |
       ---------------------------------------------------                          |  |
          two way communication between VPS and user      |                         |  |
                                                          |                         |  |
              -------------------  primary NS query --------------                  |  |
              |     (LARGE)     | <---------------  |    (USER)  |  domain ip query |  |
              |    Registrar    | --------------->  |     user   | ------------------  |
              |                 |   ip3 as primary  |            |<---------------------
              -------------------        NS         --------------     ip1 as address
                                                                          of domain

#+end_src
** Quick overview of DNS
DNS stands for *domain name server/system* and is the first step in establishing communication with a host.\\
DNS is the method to translate a name of the form /https://openbsd.org/ to an ipv4 address, which can be of 
the form *129.128.5.194* or an ipv6 address, which is a lot more complex, of the form *dead:beef*.

** DNS flow overview

A user does not necessarily store all the translation information in their local server.\\
The way a user gets this translation is by querying *primary nameservers* of the domain and making query for the ip of the domain.

*** Primary nameservers
*Primary nameservers* are the one which answer the users query for the /ip/ of a domain.\\
These are queried millions of times a second from different places for different 
domains, hence they are hosted on highly powerful computers.

For the first step, even before communicating with the server, the user must know the /ip/ address of the primary nameservers.\\
The user gets the *primary nameserver* by querying different /registrars/ for the primary nameserver of a domain.\\  
There are a lot of registrars and they have their own methods of making sure that the information between registrars is in sync. 
Typically, you update the /ip/ addresses of the primary nameservers at *your registrar*, where you bought the domain name from, 
and this information is synced all throughout the world very soon (we don't cover explaining /recursive dns/ and other complex things here).\\
This way it is fairly fast for a user to get the *primary nameservers* of your domain.

*** Secondary nameservers
But how does the /primary nameserver/ get the information?

The answer to that is the *stealth master configuration*.\\
The DNS service provider will query your personal VPS for all the information and then will start answering the queries of users.

But the DNS provider does *not* do this through the same servers that it answers queries from.\\
It is done via other /medium/ sized servers, which are called *secondary nameservers*, who query your VPS in two ways
- Either by doing queries periodically, or
- Your VPS sends a notification (*NOTIFY*) to the secondary nameserver, informing them that some change has happened and it should query you asap.

The second method is called the *NOTIFY* from your VPS to the secondary DNS.\\
Hence it is vital to get the DNS service from a provider who supports the *NOTIFY* protocol.

The query made by the secondary nameserver is called a *zone transfer, AXFR,* query, wherein it asks your VPS for the full zone file of the domain.\\  
This method to query for the zone file of a domain from a computer has been exploited to do DDOS attacks and 
needs careful adjustment to only allow the proper IPs to make *AXFR* requests.

Now the DNS providers secondary nameserver will take your zone file and then update the public facing nameservers fairly soon (typically <5 mins).

** Stealth master
For the DNS provider to get the full zone info, it first needs the /IP/ address of your VPS.  \\
This is one of the reasons why hosting services at home is a tough situation as your home address is fairly fickle.

Hence your VPS is the *master* provider of the DNS information, but because it is a small server, we delegate the
responsibility to answer the users queries to the /LARGE/ servers from your DNS service provider.

None of the users ever know that the actual authoritative information is coming stored in a different location, 
/your VPS server/, hence it is called a *stealth master*.

** AnsiMail setup
AnsiMail does this automatically provided that you give the *ip2* and *ip3* in the configuration.

- *ip2* - This is the address that is allowed to make *AXFR* requests and also the address that *NOTIFY* updates are sent to
- *ip3* - This is added in the zone file for a cross check with your registrar to make sure that the proper nameservers are used.

Typically, when you buy a DNS service, they will have the information of the public facing 
nameservers and the secondary namerservers, somewhere in their web ui.\\  
Just take the two lists of ip addresses and add them in the appropriate place in the vars.yml file.
* FreeDNS setup
:PROPERTIES:
:EXPORT_FILE_NAME: freedns
:EXPORT_HUGO_SECTION*: guides
:END:
** FreeDNS (afraid.org)
Example setup for stealth master configuration using freedns.afraid.org

*** FreeDNS configuration
First make an account on FreeDNS and then go to add *backup dns*:\\
https://freedns.afraid.org/secondary/add.php


[[/images/freedns_secondary_add.png]]


*** Secondary servers
The information related to secondary nameservers is available on their website:  
https://freedns.afraid.org/secondary/instructions.php

[[/images/freedns_secondary_info.png]]

**NOTE**: This still hasn't given you the ip of ns2.afraid.org. You should poke around on their website to find the relevant information or use the `host` command on OpenBSD to get the ip addresses of ns2.afraid.org
```
$ host ns2.afraid.org
ns2.afraid.org has address 69.65.50.223
ns2.afraid.org has IPv6 address 2001:1850:1:5:800::6b
```

** Registrar configuration (namecheap)
You can set up the configuration at your registrar, depending on your provider.  
E.g. on NameCheap:

[[/images/namecheap_dns_configuration.png]]

** AnsiMail configuration

A full vars.yml file as an example is:
#+begin_src yaml -n
domain: aisha.cc
hostname: mail
admin: aisha

additional_domains:
        - name: epsilonknot.xyz
        - name: bsd.ac
          nsd: true

private_interface: tun0

# ip1
ipv4: 108.61.81.40
ipv6: 2001:19f0:5:36b:5400:2ff:fe7f:a634

enable_clamav: true
enable_spamd: true
enable_nsd: true
username_delimiter: "."
rspamd_enable_pretrain: true

additional_udp_ports:
        - 161

# ip2
secondary_nameservers:
        - ipv4: 69.65.50.192 # freedns2
        - ipv6: 2001:1850:1:5:800::6b # freedns2
        - ipv4: 109.201.133.111 # ALL rest are cloudns
        - ipv4: 209.58.140.85
        - ipv4: 54.36.26.145
        - ipv4: 185.206.180.104
        - ipv4: 185.136.96.66
        - ipv4: 185.136.97.66
        - ipv4: 185.136.98.66
        - ipv4: 185.136.99.66
        - ipv4: 185.206.180.193
        - ipv6: 2a00:1768:1001:9::31:1
        - ipv6: 2605:fe80:2100:a013:7::1
        - ipv6: 2a0b:1640:1:1:1:1:8ec:5a47
        - ipv6: 2a06:fb00:1::1:66
        - ipv6: 2a06:fb00:1::2:66
        - ipv6: 2a06:fb00:1::3:66
        - ipv6: 2a06:fb00:1::4:66
        - ipv6: 2a0b:1640:1:3::1

# ip3
public_nameservers:
        - name: freedns2 # this is freedns2
          ipv4: 66.65.50.223
          ipv6: 2001:1850:1:5:800::6b
        - name: pns31 # ALL are cloudns
          ipv4: 185.136.96.66
          ipv6: 2a06:fb00:1::1:66
        - name: pns32
          ipv4: 185.136.97.66
          ipv6: 2a06:fb00:1::2:66
        - name: pns33
          ipv4: 185.136.98.66
          ipv6: 2a06:fb00:1::3:66
        - name: pns34
          ipv4: 185.136.99.66
          ipv6: 2a06:fb00:1::4:66
        - name: ns31
          ipv4: 109.201.133.111
          ipv6: 2a00:1768:1001:9::31:1 
        - name: ns32
          ipv4: 209.58.140.85
          ipv6: 2605:fe80:2100:a013:7::1 
        - name: ns33
          ipv4: 54.36.26.145
        - name: ns34
          ipv4: 185.206.180.104
          ipv6: 2a0b:1640:1:1:1:1:8ec:5a47 
#+end_src
* Manual DNS setup
:PROPERTIES:
:EXPORT_FILE_NAME: manualdns
:EXPORT_HUGO_SECTION*: guides
:END:
If for some reason you have decided to not /enable_nsd/ and want to do it manually,
I have outlined the necessary steps for creating records at your *DNS provider*.

** Assumptions
- Your domain name: /pdomain.abc/ (for primary domain)
- You have configured an *A record* for /ansimail.pdomain.abc/, so that it points to the current server.
- Your host server has *reverse DNS* resolving to /ansimail.pdomain.abc/.
- You are configuring dns for a secondary domain /sdomain.xyz/.\\
    (It does not need to be secondary, /sdomain.xyz/ could be the same as /pdomain.abc/)

*TTL* is the default ttl you would like to put, in AnsiMail it is set to /10800/.
** CNAME records for /sdomain.xyz/
#+begin_src
autoconfig.sdomain.xyz.          TTL IN CNAME ansimail.pdomain.abc.
autodiscover.sdomain.xyz.        TTL IN CNAME ansimail.pdomain.abc.
openpgpkey.sdomain.xyz.          TTL IN CNAME ansimail.pdomain.abc.
wkd.sdomain.xyz.                 TTL IN CNAME ansimail.pdomain.abc.
mta-sts.sdomain.xyz.             TTL IN CNAME ansimail.pdomain.abc.
imap.sdomain.xyz.                TTL IN CNAME ansimail.pdomain.abc.
pop3.sdomain.xyz.                TTL IN CNAME ansimail.pdomain.abc.
smtp.sdomain.xyz.                TTL IN CNAME ansimail.pdomain.abc.
#+end_src

** MX records for /sdomain.xyz/
#+begin_src
@                                TTL IN MX 0 ansimail.pdomain.abc.
#+end_src
This tells the world that the mail for /sdomain.xyz/ is handled by /ansimail.pdomain.abc/
** TXT records for /sdomain.xyz/
#+begin_src
sdomain.xyz.                     TTL IN TXT "v=spf1 mx:pdomain.abc -all"
_dmarc.sdomain.xyz.              TTL IN TXT "v=DMARC1;p=reject;pct=100;rua=mailto:dmarcreports@pdomain.abc"
_smtp._tls.sdomain.xyz.          TTL IN TXT "v=TLSRPTv1;rua=mailto:tlsreports@pdomain.abc;"
ansimail._domainkey.sdomain.xyz. TTL IN TXT "v=DKIM1;k=rsa;p={ANSIMAILKEY}"
#+end_src
where *{ANSIMAILKEY}* is the key stored in */etc/ansimail/dkim/ansimail.pdomain.abc.pub* 
and */etc/ansimail/dkim/ansimail.pdomain.abc.txt*.

*NOTE*: Depending on your DNS provider the key generated by AnsiMail is going to be too 
large to fit in one record. You will have to contact your DNS provider to see how 
to fit a large key into a TXT record. The work around this is to store more than one string 
in a DNS record (yes, this is possible to do, but the implementation depends on your 
hosting providers UI).\\
AnsiMail breaks down the record into correct sizes and stores it in the text files above.
#+begin_src
( "v=DKIM1;k=rsa;p=OQWcn812jW..." "....UnsdU;" )
#+end_src

** SRV records for /sdomain.xyz/
Needed for setting up older client software (and also Microsoft/iOS)
#+begin_src
_submissions._tcp.sdomain.xyz.   TTL IN SRV 0 1 465 smtp.sdomain.xyz.
_submission._tcp.sdomain.xyz.    TTL IN SRV 0 1 587 smtp.sdomain.xyz.
_imaps._tcp.sdomain.xyz.         TTL IN SRV 0 1 993 imap.sdomain.xyz.
_pop3s._tcp.sdomain.xyz.         TTL IN SRV 0 1 995 pop3.sdomain.xyz.
_imap._tcp.sdomain.xyz.          TTL IN SRV 0 0 0   .                   (OPTIONAL, depending on DNS provider compatibility)
_pop3._tcp.sdomain.xyz.          TTL IN SRV 0 0 0   .                   (OPTIONAL, depending on DNS provider compatibility)
#+end_src
** Extra SRV records for setting up openpgpkey using GnuPG
#+begin_src
_openpgpkey._tcp.sdomain.xyz.    TTL IN SRV 0 0 443 wkd.sdomain.xyz.
#+end_src
** SRV records for autodiscover in Microsoft
#+begin_src
_autodiscover._tcp.sdomain.xyz.  TTL IN SRV 0 0 443 autodiscover.sdomain.xyz.
#+end_src
